{
  "name": "cssnano",
  "version": "1.4.3",
  "description": "A modular minifier, built on top of the PostCSS ecosystem.",
  "main": "index.js",
  "bin": {
    "cssnano": "bin/cmd.js"
  },
  "scripts": {
    "test-integrations": "tape tests/integrations.js",
    "test-fixtures": "tape tests/fixtures.js | faucet",
    "test-modules": "tape tests/modules.js | faucet",
    "test-webpack": "tape tests/webpack.js | faucet",
    "test": "tape tests/*.js | faucet"
  },
  "keywords": [
    "css",
    "minify",
    "optimise",
    "optimisation",
    "postcss"
  ],
  "license": "MIT",
  "dependencies": {
    "balanced-match": "^0.2.0",
    "css-list": "^0.1.0",
    "flatten": "0.0.1",
    "indexes-of": "^1.0.1",
    "minimist": "^1.1.1",
    "postcss": "^4.1.8",
    "postcss-calc": "^4.0.1",
    "postcss-colormin": "^1.2.2",
    "postcss-convert-values": "^1.2.1",
    "postcss-discard-comments": "^1.1.2",
    "postcss-discard-duplicates": "^1.1.2",
    "postcss-discard-empty": "^1.1.0",
    "postcss-discard-unused": "^1.0.0",
    "postcss-font-family": "^1.1.0",
    "postcss-merge-idents": "^1.0.1",
    "postcss-merge-rules": "^1.3.0",
    "postcss-minify-font-weight": "^1.0.0",
    "postcss-minify-selectors": "^1.4.1",
    "postcss-normalize-url": "^1.2.1",
    "postcss-pseudoelements": "^2.1.1",
    "postcss-reduce-idents": "^1.0.0",
    "postcss-single-charset": "^0.2.2",
    "postcss-unique-selectors": "^1.0.0",
    "postcss-zindex": "^1.1.1",
    "read-file-stdin": "^0.2.0",
    "write-file-stdout": "0.0.2"
  },
  "devDependencies": {
    "decamelize": "^1.0.0",
    "faucet": "0.0.1",
    "json-loader": "^0.5.2",
    "node-libs-browser": "^0.5.2",
    "tape": "^4.0.0",
    "webpack": "^1.9.10"
  },
  "homepage": "https://github.com/ben-eb/cssnano",
  "author": {
    "name": "Ben Briggs",
    "email": "beneb.info@gmail.com",
    "url": "http://beneb.info"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/ben-eb/cssnano"
  },
  "readme": "# cssnano [![Build Status](https://travis-ci.org/ben-eb/cssnano.svg?branch=master)][ci] [![NPM version](https://badge.fury.io/js/cssnano.svg)][npm] [![Dependency Status](https://gemnasium.com/ben-eb/cssnano.svg)][deps] [![Gitter](https://badges.gitter.im/Join Chat.svg)](https://gitter.im/ben-eb/cssnano?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\n> A modular minifier, built on top of the [PostCSS] ecosystem.\n\n*Note that this project is still a work in progress, and needs more testing\nbefore it can be recommended to use in production. There are some optimisations\nthat need to be further expanded upon, and others yet to be written.*\n\ncssnano is a modular minifier that aims to utilise small modules from the\nPostCSS ecosystem, rather than being an all-encompassing module that may be\ndifficult to contribute to. Because it is written on top of PostCSS, it is able\nto do more than simple whitespace transforms - including advanced optimisations\nsuch as custom identifier reduction, `z-index` rebasing, and adjacent selector\nmerging.\n\n## Install\n\nWith [npm](https://npmjs.org/package/cssnano) do:\n\n```\nnpm install cssnano\n```\n\n## Usage\n\n### CLI\n\ncssnano ships with a command line app.\n\n```\ncssnano main.css\n```\n\nTo output this to a file specify a second parameter:\n\n```\ncssnano main.css main.min.css\n```\n\nYou can also use stdin & stdout redirections:\n\n```\ncssnano < main.css > main.min.css\n```\n\nTo see all available options, do:\n\n```\ncssnano --help\n```\n\n### gulp\n\nUse [`gulp-cssnano`].\n\n### grunt\n\nUse [`grunt-cssnano`].\n\n### broccoli\n\nUse [`broccoli-cssnano`].\n\n### Scripting\n\ncssnano can be used directly via its node.js API, or consumed as a PostCSS\nplugin.\n\n#### node.js (`nano(css, [options])`)\n\n```js\nvar nano      = require('cssnano');\nvar readFile  = require('fs').readFileSync;\nvar writeFile = require('fs').writeFileSync;\n\nvar input = readFile('main.css', 'utf8');\n\nwriteFile('main.min.css', nano(input));\n```\n\n#### PostCSS (`nano([options])`)\n\n```js\nvar nano      = require('cssnano');\nvar readFile  = require('fs').readFileSync;\nvar writeFile = require('fs').writeFileSync;\nvar postcss   = require('postcss');\n\nvar input  = readFile('main.css', 'utf8');\nvar output = postcss().use(nano()).use(/* other plugin */).process(input).css;\n\nwriteFile('main.min.css', output);\n```\n\n#### Options\n\n##### sourcemap\n\nSet this to `true` to generate an inline source map.\n\n##### zindex\n\nSet this to `false` to disable z-index transforms.\n\n##### calc\n\nSet this to `false` to disable calc transforms. If it is an object, it will be\npassed as the options to [`postcss-calc`].\n\n##### urls\n\nSet this to `false` to disable URL normalisation. If it is an object, it will be\npassed as the options to [`postcss-normalize-url`].\n\n##### idents\n\nSet this to `false` to disable custom identifier reduction.\n\n##### merge\n\nSet this to `false` to disable merging of rules.\n\n##### unused\n\nSet this to `false` to disable unused at-rule removal.\n\n##### comments\n\nIf this is an object, it will be passed as the options to\n[`postcss-discard-comments`].\n\n## Motivation\n\nAs of this writing, there are *many* ways to minify CSS available; for the Node\necosystem alone, there are lots of [modules] that offer this functionality.\nHowever, some of these projects are buggy and others are not being maintained.\nFurthermore, it is difficult to contribute to such projects with large amounts\nof integrated code. What if we could utilise the power of modularity and split\nup a CSS minifier into small pieces that have single responsibility? This\nproject's aim is, eventually, to become entirely composed of node modules that\nare responsible for small CSS optimisations. At present, it is composed of the\nfollowing modules:\n\n* [`postcss-calc`]: Convert `calc()` functions where possible.\n  `calc(5 * 10px)` -> `50px`\n* [`postcss-colormin`]: Convert colors into their smallest representation.\n  `#ff0000` -> `red`\n* [`postcss-convert-values`]: Convert time/length values.\n  `500ms` -> `.5s`\n* [`postcss-discard-comments`]: Discard comments, unless marked as special.\n* [`postcss-discard-duplicates`]: Discard duplicate rules.\n* [`postcss-discard-empty`]: Discard empty rules and media queries.\n* [`postcss-discard-unused`]: Discard unused at-rules.\n* [`postcss-font-family`]: Optimise whitespace/quoting of `font-family`\n  properties.\n* [`postcss-merge-idents`]: Merge duplicated `@keyframes` and `@counter-style`\n  identifiers with different names.\n* [`postcss-merge-rules`]: Merge adjacent rules together.\n* [`postcss-minify-font-weight`]: Convert `bold` -> `700` and `normal` -> `400`\n* [`postcss-minify-selectors`]: Optimise whitespace/quoting of selectors.\n* [`postcss-normalize-url`]: Optimise URL representations.\n* [`postcss-pseudoelements`]: Optimise double colon pseudo syntax to the single\n  colon syntax.\n* [`postcss-reduce-idents`]: Rename `@keyframes`, `@counter-style` and `counter`\n  identifiers to save space.\n* [`postcss-single-charset`]: Ensure that there is only one `@charset` in the\n  CSS file.\n* [`postcss-unique-selectors`]: Ensure selectors are unique.\n* [`postcss-zindex`]: Rebase `z-index` values to save space.\n\nThere are some optimisations that are not quite ready to be released as\nseparate modules yet, and these are still integrated into this module.\n\n## Contributing\n\nPull requests are welcome. If you add functionality, then please add unit tests\nto cover it.\n\n## License\n\nMIT Â© [Ben Briggs](http://beneb.info)\n\n[modules]:                      https://github.com/ben-eb/css-minifiers\n[PostCSS]:                      https://github.com/postcss/postcss\n\n[`postcss-calc`]:               https://github.com/postcss/postcss-calc\n[`postcss-colormin`]:           https://github.com/ben-eb/postcss-colormin\n[`postcss-convert-values`]:     https://github.com/ben-eb/postcss-convert-values\n[`postcss-discard-comments`]:   https://github.com/ben-eb/postcss-discard-comments\n[`postcss-discard-duplicates`]: https://github.com/ben-eb/postcss-discard-duplicates\n[`postcss-discard-empty`]:      https://github.com/ben-eb/postcss-discard-empty\n[`postcss-discard-unused`]:     https://github.com/ben-eb/postcss-discard-unused\n[`postcss-font-family`]:        https://github.com/ben-eb/postcss-font-family\n[`postcss-merge-idents`]:       https://github.com/ben-eb/postcss-merge-idents\n[`postcss-merge-rules`]:        https://github.com/ben-eb/postcss-merge-rules\n[`postcss-minify-font-weight`]: https://github.com/ben-eb/postcss-minify-font-weight\n[`postcss-minify-selectors`]:   https://github.com/ben-eb/postcss-minify-selectors\n[`postcss-normalize-url`]:      https://github.com/ben-eb/postcss-normalize-url\n[`postcss-pseudoelements`]:     https://github.com/axa-ch/postcss-pseudoelements\n[`postcss-reduce-idents`]:      https://github.com/ben-eb/postcss-reduce-idents\n[`postcss-single-charset`]:     https://github.com/hail2u/postcss-single-charset\n[`postcss-unique-selectors`]:   https://github.com/ben-eb/postcss-unique-selectors\n[`postcss-zindex`]:             https://github.com/ben-eb/postcss-zindex\n\n[`gulp-cssnano`]:               https://github.com/ben-eb/gulp-cssnano\n[`grunt-cssnano`]:              https://github.com/sindresorhus/grunt-cssnano\n[`broccoli-cssnano`]:           https://github.com/sindresorhus/broccoli-cssnano\n\n[ci]:                           https://travis-ci.org/ben-eb/cssnano\n[deps]:                         https://gemnasium.com/ben-eb/cssnano\n[npm]:                          http://badge.fury.io/js/cssnano\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/ben-eb/cssnano/issues"
  },
  "_id": "cssnano@1.4.3",
  "_shasum": "034ff12d06c5125ec31c14343b81147d2f6d24fd",
  "_from": "cssnano@^1.4.2",
  "_resolved": "https://registry.npmjs.org/cssnano/-/cssnano-1.4.3.tgz"
}
